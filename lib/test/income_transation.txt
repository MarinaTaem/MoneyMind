import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:money_mind/models/connect_database.dart';
import 'package:money_mind/models/data_models.dart';

class AddIncome extends StatefulWidget {
  const AddIncome({super.key});

  @override
  State<AddIncome> createState() => _AddIncomeState();
}

class _AddIncomeState extends State<AddIncome> {
  late DatabaseHelper _recordDatabase;
  late Budget _budget; // Add Budget instance
  List<Category> _incomeCategories = [];

  final _formKey = GlobalKey<FormState>();
  final TextEditingController _amountCtr = TextEditingController();
  final TextEditingController _noteCtr = TextEditingController();
  Category? selectedIncomeCategory;

  String formattedDate = '';
  DateTime date = DateTime.now();

  @override
  void initState() {
    super.initState();
    formattedDate = DateFormat('dd-MM-yyyy').format(date);
    _recordDatabase = DatabaseHelper();
    _budget = Budget(); // Initialize Budget
    _loadCategories();
  }

  Future<void> _loadCategories() async {
    _incomeCategories =
        await _recordDatabase.getIncomeCategories(type: CategoryType.income);
    setState(() {});
  }

  void _addIncome() async {
    if (_formKey.currentState!.validate()) {
      double amount = double.parse(_amountCtr.text);
      String note = _noteCtr.text;

      // Create a Transaction object
      Transaction transaction = Transaction(
        amount: amount,
        currency: 'Riels', // or whatever currency you are using
        description: note,
        dateRecord: date,
        category: selectedIncomeCategory!, // Ensure a category is selected
        typeBudget: BudgetType.income,
      );

      // Add the transaction to the budget
      _budget.addIncome(transaction);

      // Save to the database
      await _recordDatabase.insertRecord(
          1, 'income', selectedIncomeCategory!.name, amount, formattedDate, note);

      // Optionally, clear the fields or navigate back
      _amountCtr.clear();
      _noteCtr.clear();
      setState(() {
        selectedIncomeCategory = null; // Reset selected category
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Add Income')),
      body: SafeArea(
        child: Padding(
          padding: EdgeInsets.all(10),
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Amount
                TextFormField(
                  controller: _amountCtr,
                  keyboardType: TextInputType.number,
                  decoration: InputDecoration(labelText: 'Amount'),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter amount';
                    }
                    return null;
                  },
                ),
                SizedBox(height: 20),
                // Category
                Text('Category', style: TextStyle(fontSize: 20)),
                SizedBox(height: 20),
                // Category Selection
                _incomeCategories.isEmpty
                    ? Center(child: Text('No income categories available.'))
                    : DropdownButton<Category>(
                        hint: Text('Select Category'),
                        value: selectedIncomeCategory,
                        onChanged: (Category? newValue) {
                          setState(() {
                            selectedIncomeCategory = newValue;
                          });
                        },
                        items: _incomeCategories.map((Category category) {
                          return DropdownMenuItem<Category>(
                            value: category,
                            child: Text(category.name),
                          );
                        }).toList(),
                      ),
                // Date
                SizedBox(height: 20),
                Text('Date: $formattedDate', style: TextStyle(fontSize: 20)),
                Center(
                  child: IconButton(
                    onPressed: () {
                      _showCalendarDialog(context);
                    },
                    icon: Icon(Icons.calendar_today),
                  ),
                ),
                SizedBox(height: 20),
                // Comments
                Text('Comments', style: TextStyle(fontSize: 20)),
                SizedBox(height: 20),
                TextFormField(
                  controller: _noteCtr,
                  decoration: InputDecoration(labelText: 'Comments'),
                ),
                SizedBox(height: 20),
                // Save Button
                Center(
                  child: SizedBox(
                    width: 300,
                    child: ElevatedButton(
                      onPressed: () async {
                        _addIncome();
                      },
                      child: Text('Save'),
                      style: ElevatedButton.styleFrom(backgroundColor: Colors.amber),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  void _showCalendarDialog(BuildContext context) async {
    DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: date,
      firstDate: DateTime(2000),
      lastDate: DateTime(2101),
    );

    if (pickedDate != null && pickedDate != date) {
      setState(() {
        date = pickedDate;
        formattedDate = DateFormat('dd-MM-yyyy').format(date);
      });
    }
  }
}